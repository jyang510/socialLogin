{"version":3,"sources":["components/Login.js","components/Mypage.js","App.js","index.js"],"names":["queryStr","qs","stringify","client_id","redirect_uri","response_type","scope","access_type","Login","props","socialLoginHandler","bind","GOOGLE_LOGIN_URL","AUTHORIZE_URI","window","location","assign","this","className","id","alt","src","onClick","Component","Mypage","state","email","name","picture","a","id_token","idToken","console","log","decode","jwtDecode","setState","getGoogleUserInfo","accessToken","App","isLogin","getToken","authorizationCode","axios","post","then","res","data","catch","err","url","URL","href","searchParams","get","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAaMA,E,OAAWC,EAAGC,UAAU,CAC5BC,UAJgB,2EAKhBC,aAAc,yCACdC,cAAe,OAIfC,MAAO,uBAGPC,YAAa,YAoCAC,E,kDA/Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAK1B,EAAKC,iBAAmBC,gDAAsBb,EAR7B,E,sDAWnB,WACEc,OAAOC,SAASC,OAAOC,KAAKL,oB,oBAG9B,WACE,OACE,yBAAKM,UAAU,kBAAf,oGAEE,yBAAKC,GAAG,OAAOC,IAAI,OAAOC,IAAI,0DAC9B,4BACEC,QAASL,KAAKP,mBACdQ,UAAU,kBAFZ,8C,GArBYK,a,QCqCLC,E,kDAzDb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CAGXC,MAAO,GACPC,KAAM,GACNC,QAAS,IAPM,E,4FAWnB,oCAAAC,EAAA,sDACQC,EAAWb,KAAKR,MAAMsB,QAC5BC,QAAQC,IAAR,yBAAyBH,IAEnBI,EAASC,YAAUL,GACzBE,QAAQC,IAAR,wDACAD,QAAQC,IAAIC,GACJR,EAAyBQ,EAAzBR,MAAOC,EAAkBO,EAAlBP,KAAMC,EAAYM,EAAZN,QACrBI,QAAQC,IAAR,sBAAsBP,IACtBM,QAAQC,IAAR,qBAAqBN,IACrBK,QAAQC,IAAR,wBAAwBL,IACxBX,KAAKmB,SAAS,CACZV,QACAC,OACAC,YAdJ,iD,qFAqBA,WACEX,KAAKoB,sB,oBAGP,WAGE,OAFwBpB,KAAKR,MAArB6B,YAMN,oCACE,uCACA,sCAAQrB,KAAKQ,MAAMC,MAAnB,OACA,sCACA,sCAAQT,KAAKQ,MAAME,KAAnB,OACA,yCACA,4BACE,yBAAKN,IAAKJ,KAAKQ,MAAMG,YAVlB,4F,GA1CQL,a,iBC8DNgB,E,kDA7Db,aAAe,IAAD,8BACZ,gBACKd,MAAQ,CACXe,SAAS,EAETF,YAAa,GACbP,QAAS,IAEX,EAAKU,SAAW,EAAKA,SAAS9B,KAAd,gBARJ,E,mFAWd,WAAe+B,GAAf,oBAAAb,EAAA,sEAOQc,IAAMC,KAAK,iCAAkC,CACjDF,sBAGDG,MAAK,SAAAC,GACJ,EAAKV,SAAS,CACZI,SAAS,EACTF,YAAaQ,EAAIC,KAAKT,YACtBP,QAASe,EAAIC,KAAKhB,aAGrBiB,OAAM,SAAAC,GACLjB,QAAQC,IAAIgB,MAnBhB,2C,sFAwBA,WACE,IAAMC,EAAM,IAAIC,IAAIrC,OAAOC,SAASqC,MACpCpB,QAAQC,IAAR,iCAAuBiB,IACvB,IAAMR,EAAoBQ,EAAIG,aAAaC,IAAI,QAC/CtB,QAAQC,IAAR,2CAAiCS,IAC7BA,GACFzB,KAAKwB,SAASC,K,oBAIlB,WACE,MAA0CzB,KAAKQ,MAAvCe,EAAR,EAAQA,QAASF,EAAjB,EAAiBA,YAAaP,EAA9B,EAA8BA,QAC9B,OACE,kBAAC,IAAD,KACE,yBAAKb,UAAU,OACZsB,EACC,kBAAC,EAAD,CAAQF,YAAaA,EAAaP,QAASA,IAEzC,kBAAC,EAAD,Y,GAtDIR,a,MCClBgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.250c6c7f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport qs from 'qs';\n    /* 구글 API 일련의 과정\n    구글 로그인 버튼을 누른다\n    => 클라이언트에서 인가url로 이동하여 확인을 하고, 확인이 되면 authorize_code를 받아서 클라서버에 axios 요청을 한다\n    => 클라에서 받은 코드를 가지고 그 외 필요한 정보들(clientID, secret, grant_type 등등)을 포함해서 token 요청을 한다\n    => 우리에게 필요한 게 들어있는건 id_token이기 때문에 jwt토큰화된 id_token을 decoding 해줘서 원하는 값을 추출해낸다\n    => 추출해낸 값들을 DB에 저장하고, 클라이언트에 보낼 건 보내주고 과정을 마친다\n    */\n\nconst CLIENT_ID = \"240166666352-jrcs8avt11vl8dp0hgo60qgnhf2t9rnn.apps.googleusercontent.com\";\nconst AUTHORIZE_URI = \"https://accounts.google.com/o/oauth2/v2/auth\";\n\nconst queryStr = qs.stringify({\n  client_id: CLIENT_ID,\n  redirect_uri: 'https://d1839m99iakp36.cloudfront.net/',\n  response_type: 'code',\n  //scope은 사용자의 어떤 데이터와 어떤 작업에 대한 권한을 요청하는지를 나타내는데\n  //여기서는 People API를 읽기 전용으로 호출이 필요하다고 설정함.\n  //더 자세한 건 https://developers.google.com/identity/protocols/oauth2/scopes 이 레퍼런스를 참조해야한다\n  scope: \"openid profile email\", //전화번호부 호출 가능한 scope\n  //이걸 설정하면 수명이 있는 accessToken만이 아니라 refreshToken까지 발급받을 수 있다\n  //근데 지금은 access_token이랑 refresh_token을 쓰는 api 호출을 안 해서 그런가? 잘 모르겠는데 Refreshtoken을 안 줌\n  access_type: 'offline',\n});\n\n\nclass Login extends Component {\n  constructor(props) {\n    super(props)\n\n    this.socialLoginHandler = this.socialLoginHandler.bind(this)\n\n    // TODO: Google로부터 사용자 인증을 위해 Google로 이동해야 합니다. 적절한 URL을 입력하세요.\n    // OAuth 인증이 완료되면 authorization code와 함께 callback url로 리디렉션 합니다.\n\n    this.GOOGLE_LOGIN_URL = AUTHORIZE_URI + \"?\" + queryStr;\n  }\n\n  socialLoginHandler() {//인가서버 url을 넣어주게 되면\n    window.location.assign(this.GOOGLE_LOGIN_URL)\n  }\n\n  render() {\n    return (\n      <div className='loginContainer'>\n        OAuth 2.0으로 소셜 로그인을 구현해보세요.\n        <img id=\"logo\" alt=\"logo\" src=\"https://image.flaticon.com/icons/png/512/25/25231.png\" />\n        <button\n          onClick={this.socialLoginHandler}\n          className='socialloginBtn'\n        >\n          Google으로 로그인\n          </button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\n//구글 openID로 받은 idToken이 jwt방식으로 된 거라 decode해주기 위해 import받는 모듈\nimport jwtDecode from \"jwt-decode\";\n\nclass Mypage extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // TODO: GitHub API 를 통해서 받아올 수 있는 정보들 중에서\n      // 저희 유저 DB 만들 때 필요하다고 생각된 부분인데, 만약 더 필요한 게 있다 싶으면 말해주세요\n      email: '',\n      name: '',\n      picture: ''\n    }\n  }\n\n  async getGoogleUserInfo() {\n    const id_token = this.props.idToken;\n    console.log(`id_token은 ${id_token}`);\n\n    const decode = jwtDecode(id_token);\n    console.log(`decode의 값은 이러하다\\n`);\n    console.log(decode);\n    const { email, name, picture } = decode;\n    console.log(`email은 ${email}`);\n    console.log(`name은 ${name}`);\n    console.log(`picture은 ${picture}`);\n    this.setState({\n      email,\n      name,\n      picture\n    })\n\n    // console.log(userInfo.data);\n    // console.log(this.state.name);\n  }\n\n  componentDidMount() {\n    this.getGoogleUserInfo()\n  }\n\n  render() {\n    const { accessToken } = this.props\n\n    if (!accessToken) {\n      return <div>로그인이 필요합니다</div>\n    }\n    return (\n      <>\n        <dt>email: </dt>\n        <dd>{`${this.state.email}\\n`}</dd>\n        <dt>name: </dt>\n        <dd>{`${this.state.name}\\n`}</dd>\n        <dt>picture: </dt>\n        <dd>\n          <img src={this.state.picture} />\n        </dd>\n      </>\n    );\n  };\n}\n\nexport default Mypage;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Login from './components/Login';\nimport Mypage from './components/Mypage';\nimport axios from 'axios';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLogin: false,\n      // TODO:\n      accessToken: '',\n      idToken: ''\n    };\n    this.getToken = this.getToken.bind(this);\n  }\n\n  async getToken(authorizationCode) {\n    // 받아온 authorization code로 다시 OAuth App에 요청해서 access token을 받을 수 있습니다.\n    // access token은 보안 유지가 필요하기 때문에 클라이언트에서 직접 OAuth App에 요청을 하는 방법은 보안에 취약할 수 있습니다.\n    // authorization code를 서버로 보내주고 서버에서 access token 요청을 하는 것이 적절합니다.\n\n    // TODO: 서버의 /callback 엔드포인트로 authorization code를 보내주고 access token을 받아옵니다.\n\n    await axios.post('http://localhost:8080/callback', {\n      authorizationCode\n    }) \n    //body에 authorizationCode를 실어서 POST요청을 보낸다.\n    .then(res => { \n      this.setState({\n        isLogin: true,\n        accessToken: res.data.accessToken,\n        idToken: res.data.idToken\n      });\n    })\n    .catch(err => {\n      console.log(err);\n    })\n\n  }\n\n  componentDidMount() {\n    const url = new URL(window.location.href) //url을 긁어오는 건가?\n    console.log(`url의 값은 ${url}`);\n    const authorizationCode = url.searchParams.get('code')\n    console.log(`authorization의 값은 ${authorizationCode}`);\n    if (authorizationCode) {\n      this.getToken(authorizationCode)\n    }\n  }\n\n  render() {\n    const { isLogin, accessToken, idToken } = this.state;\n    return (\n      <Router>\n        <div className='App'>\n          {isLogin ? (\n            <Mypage accessToken={accessToken} idToken={idToken} />\n          ) : (\n              <Login />\n            )}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}